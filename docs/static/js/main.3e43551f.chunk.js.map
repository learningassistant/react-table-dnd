{"version":3,"sources":["components/DraggableTr.jsx","components/DraggableTrCopy.jsx","components/DroppableTbody.jsx","components/Un-DroppableTbody.jsx","utils/index.js","components/DndTable.jsx","App.js","index.js"],"names":["DraggableTr","props","children","info","sortOrder","original","key","index","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","style","backgroundColor","isDragging","border","opacity","TrComponent","className","DraggableTrCopy","DroppableTbody","droppableId","TbodyComponent","placeholder","UnDroppableTbody","isDropDisabled","getFakeUnit","Faker","helpers","replaceSymbols","getFakeRef","getFakeName","lorem","sentence","getTableData","numRows","data","i","push","unit","name","DndTable","state","splitView","onDragEnd","bind","result","destination","from","source","to","arr","splice","move","this","length","setState","e","console","error","Container","Row","Col","Button","float","variant","onClick","height","columns","Header","accessor","getTrProps","_","Fragment","paddingTop","md","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e43551f.chunk.js","sourcesContent":["// Package includes\r\nimport React from 'react';\r\nimport { ReactTableDefaults } from 'react-table'; // Contains react-table components, i.e. Tr, Th components\r\nimport { Draggable } from 'react-beautiful-dnd'; // Wrapper for our draggable TrComponent\r\n\r\n/**\r\n * TrComponent wrapped in Draggable \r\n * adapted from https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/draggable.md\r\n */\r\nconst DraggableTr = props => {\r\n    const { children, info } = props;\r\n    if (info) {\r\n        const { original } = info;\r\n        const { sortOrder } = original;\r\n        return (\r\n            <Draggable key={sortOrder} index={sortOrder-1} draggableId={'d1' + sortOrder}>\r\n                {(provided, snapshot) => (\r\n                    <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={{\r\n                            ...provided.draggableProps.style,\r\n                            backgroundColor: snapshot.isDragging ? 'pink' : '',\r\n                            border: snapshot.isDragging ? '2px solid black' : '',\r\n                            opacity: snapshot.isDragging ? '.8' : '',\r\n                        }}\r\n                    >\r\n                        <ReactTableDefaults.TrComponent className={\"draggable-tr\"}>\r\n                            {children}\r\n                        </ReactTableDefaults.TrComponent>\r\n                    </div>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    } else {\r\n        // ReactTable header or empty row\r\n        return (\r\n            <ReactTableDefaults.TrComponent>\r\n                {children}\r\n            </ReactTableDefaults.TrComponent>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DraggableTr;","// Package includes\r\nimport React from 'react';\r\nimport { ReactTableDefaults } from 'react-table'; // Contains react-table components, i.e. Tr, Th components\r\nimport { Draggable } from 'react-beautiful-dnd'; // Wrapper for our draggable TrComponent\r\n\r\n/**\r\n * TrComponent wrapped in Draggable \r\n * adapted from https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/draggable.md\r\n */\r\nconst DraggableTrCopy = props => {\r\n    const { children, info } = props;\r\n    if (info) {\r\n        const { original } = info;\r\n        const { sortOrder } = original;\r\n        return (\r\n            <Draggable key={sortOrder} index={sortOrder-1} draggableId={'dr2' + sortOrder}>\r\n                {(provided, snapshot) => (\r\n                    <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={{\r\n                            ...provided.draggableProps.style,\r\n                            backgroundColor: snapshot.isDragging ? 'pink' : '',\r\n                            border: snapshot.isDragging ? '2px solid black' : '',\r\n                            opacity: snapshot.isDragging ? '.8' : '',\r\n                        }}\r\n                    >\r\n                        <ReactTableDefaults.TrComponent className={\"draggable-tr\"}>\r\n                            {children}\r\n                        </ReactTableDefaults.TrComponent>\r\n                    </div>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    } else {\r\n        // ReactTable header or empty row\r\n        return (\r\n            <ReactTableDefaults.TrComponent>\r\n                {children}\r\n            </ReactTableDefaults.TrComponent>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DraggableTrCopy;","// Package includes\r\nimport React from 'react';\r\nimport { ReactTableDefaults } from 'react-table'; // Contains react-table components, i.e. Tr, Th components\r\nimport { Droppable } from 'react-beautiful-dnd'; // Wrapper for our Droppable Tbody\r\n\r\n/**\r\n * TbodyComponent wrapped in droppable \r\n * adapted from https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\r\n */\r\nconst DroppableTbody = props => {\r\n    return (\r\n        <Droppable key=\"course-builder\" droppableId=\"course-builder\">\r\n            {(provided) => (\r\n                <div ref={provided.innerRef} >\r\n                    <ReactTableDefaults.TbodyComponent  >\r\n                        {props.children}\r\n                    </ReactTableDefaults.TbodyComponent>\r\n                    {provided.placeholder}\r\n                </div>\r\n            )}\r\n        </Droppable>\r\n    );\r\n};\r\n\r\nexport default DroppableTbody;","// Package includes\r\nimport React from 'react';\r\nimport { ReactTableDefaults } from 'react-table'; // Contains react-table components, i.e. Tr, Th components\r\nimport { Droppable } from 'react-beautiful-dnd'; // Wrapper for our Droppable Tbody\r\n\r\n/**\r\n * TbodyComponent wrapped in droppable \r\n * adapted from https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\r\n */\r\nconst UnDroppableTbody = props => {\r\n    return (\r\n        <Droppable key=\"course-builder-2\" droppableId=\"course-builder-2\" isDropDisabled={true}>\r\n            {(provided) => (\r\n                <div ref={provided.innerRef}>\r\n                    <ReactTableDefaults.TbodyComponent>\r\n                        {props.children}\r\n                    </ReactTableDefaults.TbodyComponent>\r\n\r\n                    {provided.placeholder}\r\n                </div>\r\n            )}\r\n        </Droppable>\r\n    );\r\n};\r\n\r\nexport default UnDroppableTbody;","import Faker from 'faker';\r\n\r\nconst getFakeUnit = () => {\r\n    return Faker.helpers.replaceSymbols('###');\r\n};\r\n\r\nconst getFakeRef = () => {\r\n    return Faker.helpers.replaceSymbols('?/###/####');\r\n};\r\n\r\nconst getFakeName = () => {\r\n    return Faker.lorem.sentence();\r\n};\r\n\r\nconst getTableColumns = () => {\r\n    return [\r\n        {\r\n            Header: \"#\",\r\n            accessor: \"sortOrder\"\r\n        },\r\n        {\r\n            Header: \"Unit\",\r\n            accessor: \"unit\"\r\n        },\r\n        {\r\n            Header: \"Ref\",\r\n            accessor: \"ref\"\r\n        },\r\n        {\r\n            Header: \"Name\",\r\n            accessor: \"name\"\r\n        },\r\n    ];\r\n};\r\n\r\nconst getTableData = (numRows = 20) => {\r\n\r\n    let data = [];\r\n\r\n    for (let i = 1; i <= numRows; i++) {\r\n        data.push(\r\n            {\r\n                sortOrder: i,\r\n                unit: getFakeUnit(),\r\n                ref: getFakeRef(),\r\n                name: getFakeName(),\r\n            }\r\n        )\r\n    }\r\n\r\n    return data;\r\n};\r\n\r\n/**\r\n * Moves array object from the given index to a given index\r\n * \r\n * @param {Array} arr \r\n * @param {Number} from \r\n * @param {Number} to \r\n */\r\nconst move = (arr, from, to) => {\r\n    arr.splice(to, 0, arr.splice(from, 1)[0]);\r\n    return arr;\r\n};\r\n\r\nexport {\r\n    getTableData,\r\n    getTableColumns,\r\n    move\r\n}","// Package includes\r\nimport React from 'react';\r\nimport ReactTable from 'react-table';\r\nimport \"react-table/react-table.css\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport { MdKeyboardBackspace } from 'react-icons/md'\r\n\r\n// Additional components\r\nimport { \r\n    DraggableTr, \r\n    DroppableTbody, \r\n    UnDroppableTbody, \r\n    DraggableTrCopy,\r\n} from '../components';\r\n\r\n// Utils\r\nimport { getTableData, getTableColumns, move } from '../utils';\r\n\r\nexport default class DndTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            splitView: false,\r\n            data: getTableData(1000),\r\n        };\r\n\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    onDragEnd(result) {\r\n\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        \r\n        \r\n        try {\r\n            // Insert row into its new position in array.\r\n            let from = result.source.index,\r\n                to   = result.destination.index,\r\n                data = move(this.state.data, from, to);\r\n\r\n\r\n            // Update sortOrder\r\n            for (let i = 0; i < data.length; i++) {\r\n                data[i].sortOrder = i+1;\r\n            }\r\n\r\n            this.setState({ data });\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (   \r\n            <DragDropContext onDragEnd={this.onDragEnd} >\r\n                <Container>\r\n                    <Row>\r\n                        <Col><h1>Course Builder</h1></Col>\r\n                        <Col>\r\n                            <Button style={{ float: 'right'}} variant=\"primary\" onClick={() => this.setState({splitView: !this.state.splitView})}> \r\n                                {\r\n                                    this.state.splitView ?    \r\n                                        'Turn off split view' :\r\n                                        'Turn on split view'\r\n                                }\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <ReactTable\r\n                                style={{height: \"600px\"}}\r\n                                columns={getTableColumns()}\r\n                                data={this.state.data}\r\n                                TrComponent={DraggableTr}\r\n                                getTrProps={(_, info) => {return {info}}}\r\n                                TbodyComponent={DroppableTbody}\r\n                                className=\"-highlight\"\r\n                            />\r\n                        </Col>\r\n                        { \r\n                            this.state.splitView && (\r\n                                <React.Fragment>\r\n                                    <Col style={{ paddingTop: '25%' }} md=\"auto\">\r\n                                        <MdKeyboardBackspace ></MdKeyboardBackspace>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <ReactTable\r\n                                            style={{height: \"600px\"}}\r\n                                            columns={getTableColumns()}\r\n                                            data={this.state.data}\r\n                                            TrComponent={DraggableTrCopy}\r\n                                            getTrProps={(_, info) => {return {info}}}\r\n                                            TbodyComponent={UnDroppableTbody}\r\n                                            className=\"-highlight\"\r\n                                        />\r\n                                    </Col>\r\n                                </React.Fragment>\r\n                            )\r\n                        }\r\n                    </Row>\r\n                </Container>\r\n            </DragDropContext>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { DndTable } from './components';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <DndTable />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './main.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}